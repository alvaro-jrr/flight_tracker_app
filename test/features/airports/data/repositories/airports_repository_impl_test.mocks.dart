// Mocks generated by Mockito 5.4.0 from annotations
// in flight_tracker_app/test/features/airports/data/repositories/airports_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flight_tracker_app/core/network/network_info.dart' as _i5;
import 'package:flight_tracker_app/features/airports/data/data_sources/airports_remote_data_source.dart'
    as _i2;
import 'package:flight_tracker_app/features/airports/data/models/airport_model.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AirportsRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAirportsRemoteDataSource extends _i1.Mock
    implements _i2.AirportsRemoteDataSource {
  @override
  _i3.Future<List<_i4.AirportModel>> getAirportsByCountryCode(
          String? countryCode) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAirportsByCountryCode,
          [countryCode],
        ),
        returnValue:
            _i3.Future<List<_i4.AirportModel>>.value(<_i4.AirportModel>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.AirportModel>>.value(<_i4.AirportModel>[]),
      ) as _i3.Future<List<_i4.AirportModel>>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i5.NetworkInfo {
  @override
  _i3.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
